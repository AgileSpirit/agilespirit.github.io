---
layout: post
title: Integrate webapp rendered HTML-markups into an HippoCMS application with EsiGate
date: 2014-01-20 08:00:00
published: true
excerpt: Imagine you have a first webapp, business oriented, that displays data in some HTML components/panels like "the list of the last news", or "a datagrid of the top-10 products", etc. This webapp is made with some web framework in whatever – HTML based – language you want (DotNet, JSP, Struts, GWT, full-JQuery, AngularJS, etc.). Now, imagine yo have a second webapp, retail oriented, based on a Content Manager System (CMS), in which you were required to re-use the first app data. There are two approaches to solve your problem &#58; the common way or the ESI way.
disqus: true
---

Imagine you have a first webapp, business oriented, that displays data in some HTML components/panels like “the list of the last news”, or “a datagrid of the top-10 products”, etc. This webapp is made with some web framework in whatever – HTML based – language you want (DotNet, JSP, Struts, GWT, full-JQuery, AngularJS, etc.).

Now, imagine yo have a second webapp, retail oriented, based on a Content Manager System (CMS), in which you were required to re-use the first app data.

## Two solutions

### The common way

A commonly used solution is to expose a new Web Service (or REST resource) that retrieve data from the business application to be consumed by the CMS one. This way works well but requires that each team make some specific develop: the first one to create and expose the service, and the second to develop a CMS component in order to call the service.

### The ESI way

There is another approach, based on the [ESI language](http://www.w3.org/TR/esi-lang), that allows a webapp to expose some fragments of rendered HTML-markups which can be integrated in another site that include them.

> Edge Side Includes (ESI) is an XML-based markup language that provides a means to assemble resources in HTTP clients. Unlike other in-markup languages, ESI is designed to leverage client tools like caches to improve end-user perceived performance, reduce processing overhead on the origin server, and enhanced availability. ESI allows for dynamic content assembly at the edge of the network, whether it is in a Content Delivery Network, end-user’s browser, or in a “Reverse Proxy” right next to the origin server.

##In practice

For our example, the business webapp is a simple Java/JSP based application and the CMS application is made with the Java open source [HippoCMS](http://www.onehippo.com/).

Firstly, we will define some fragments to be exposed in our business application with some ESI tags. Then, we will include these fragments into our CMS application. The whole in less than 10 minutes !

In order to make this works, we need an ESI processor program that interprets the ESI tags. It appears that [HippoCMS provides such a processor in its toolkit](http://www.onehippo.org/7_8/library/concepts/web-application/hst-2-edge-side-includes-support.html), but we will not use it. Instead we will use [ESIGAte](http://esigate.org/), that is a reverse-proxy with ESI support and also an efficient Web cache (with some other cool features).

Concretely, ESIGate is a Java server launched with a command line that listens (by default) the port 8081. Please, refer to the [official quick start documentation](http://esigate.org/quickstart.html) for more details on doing this.

### The webapp side

The aim of this tutorial is to show you a way of quickly and easily feeding a CMS application. So we are only going to make a simple thing such as expose a basic HTML markup (a span String) in the first site and include it in a dedicated area of the second one (ex: the footer area).

Imagine that the code of our initial business (JSP-) page looks like this:

{% highlight html %}
<!-- greeting.jsp (before) -->
<html>
<head>
    <title>EsiGate is watching you...</title>
</head>
<body>
    <!--  span to expose vie ESI -->
    This string is generated by the Webapp included with EsiGate.
</body>
</html>
{% endhighlight %}

We just surround our String with the corresponding ESI tags – – to declare an exposed fragment such as following:

{% highlight html %}
<!-- greeting.jsp (after) -->
<html>
<head>
    <title>EsiGate is watching you...</title>
</head>
<body>
<esi:fragment name="body">
    This string is generated by the Webapp included with EsiGate.
</esi:fragment>
</body>
</html>
{% endhighlight %}

And this is it for the web application side !

### The CMS-site side

Now, we have to make the inclusion into the pages of our CMS application. We want to display the ESI fragment String in the footer of our site.

The footer is described in a JSP file that initially looks like this:


{% highlight html %}
<!-- footer.jsp (before) -->
<%@ include file="/WEB-INF/jspf/htmlTags.jspf" %>
<div class="container">
    <hr>
    <!-- Site footer -->
    <footer>
        <p class="pull-right"><a href="#">Back to top</a></p>
        <p>
            &copy; 2014 Agile Spirit &middot;
            <a href="#">Privacy</a> &middot;
            <a href="#">Terms</a> &middot;
        </p>
    </footer>
</div>
{% endhighlight %}

We then declare where to include the exposed fragment in this page.

{% highlight html %}
<!-- footer.jsp (after) -->
<%@ include file="/WEB-INF/jspf/htmlTags.jspf" %>
<div class="container">
    <hr>
    <!-- Site footer -->
    <footer>
        <p class="pull-right"><a href="#">Back to top</a></p>
        <p>
            &copy; 2014 Agile Spirit &middot;
            <a href="#">Privacy</a> &middot;
            <a href="#">Terms</a> &middot;
            <esi:include src="http://localhost:8080/greeting/">
                You should not see this string. Check that you are on port 8081 with EsiGate server running.
            </esi:include>
        </p>
    </footer>
</div>
{% endhighlight %}

You will notice that we declare a String between the two ESI tags. Actually, it is a placehoder that should be replaced by the fragment data if the ESI processing has worked well.

### Ecco qua !
You can now test your ESI integration by accessing your CMS site through ESIGate (ex: [htpp://localhost:8081/site/](htpp://localhost:8081/site/))

You can also make the test without ESIGate to check the placeholder (ex: [htpp://localhost:8080/site/](htpp://localhost:8080/site/))

### Go further
The sources of the project are available on [Github](https://github.com/AgileSpirit/HappyHippos).

